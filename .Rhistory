Outlay_clean<-function(df){
df<-readxl::read_xlsx(df)
df<-df%>%
dplyr::mutate_at(vars(`Outlay`:`Planning Level-Budget Team`),~replace_na(.,0))%>%
dplyr::mutate(`Outlay` = as.numeric(`Outlay`))%>%
dplyr::mutate(`Planning Level-Budget Team` = as.numeric(`Planning Level-Budget Team`))
df<-df%>%
dplyr::mutate(`Fiscal Year` = as.character(`Fiscal Year`))%>%
# dplyr::rename(`Prime Partner Name` = "Partner Name")%>%
dplyr::mutate(`Data Stream`="Outlay")
#df<-df%>%
# dplyr::select(-'Planning Level')
df<-df%>%
pivot_wider(names_from = `Quarter`, values_from = `Outlay`)
#df<-df%>%
dplyr::mutate_at(vars(`Quarter 2`:`Quarter 3`), funs(replace(., duplicated (.), 0)))
df<-df%>%
pivot_longer(
cols = `Quarter 2` : `Quarter 4`,
names_to="Quarter",
values_to="Outlays"
)
return(df)
}
filesOutlay<-list.files("Datasets",pattern="outlay meeting 12.3.2020",full.names = TRUE)
df.Outlay<-purrr::map_dfr(.x=filesOutlay,
.f=~Outlay_clean(.x))
library(stringr)
library(dplyr)
library(tidyverse)
library(readxl)
library(ICPIutilities)
library(glamr)
library(purrr)
library(here)
library(googlesheets4)
library(stringr)
library(dplyr)
library(tidyverse)
library(readxl)
library(ICPIutilities)
library(glamr)
library(purrr)
library(here)
library(googlesheets4)
here()
library(tidyverse)
library(vroom)
library(ICPIutilities)
library(readxl)
df <- read_excel("C:/Users/bkasdan/Downloads/Ethiopia cleaned cadre merged 11.24.20.xlsx",
sheet = "Ethiopia cleaned cadre merged 1")
View(df)
df <- df %>% mutate(fte = as.numeric(fte))
df <- df %>% mutate(prep_percent = as.numeric(prep_percent))
df <- df %>% mutate(orgunituid = as.numeric(orgunituid))
df <- df %>% mutate(sd_fte = case_when(interaction_type == "Service Delivery" ~ fte))
df <- df %>% mutate(both_fte = case_when(interaction_type == "Service Delivery and Non Service Delivery" ~ fte*service_delivery_percent))
glimpse(df)
df <- df %>% mutate(service_delivery_percent = as.numeric(service_delivery_percent))
df <- df %>% dplyr::mutate(service_delivery_percent = as.numeric(service_delivery_percent))
glimpse(df)
df <- df %>% mutate(sd_fte = case_when(interaction_type == "Service Delivery" ~ fte))
df<-df %>%
mutate_at(vars(`sd_fte`:`both_fte`),~replace_na(.,0))
df <- df %>% mutate(both_fte = case_when(interaction_type == "Service Delivery and Non Service Delivery" ~ fte*service_delivery_percent))
df<-df %>%
mutate_at(vars(`sd_fte`:`both_fte`),~replace_na(.,0))
df <- df %>% mutate(sum_fte = sd_fte+both_fte)
df <- df %>% mutate(prep_fte =
case_when(program == "Prevention" ~ sum_fte*prep_percent))
df<-df %>%
mutate_at(vars(`sd_fte`:`prep_fte`),~replace_na(.,0))
df <- df %>%
mutate(combined_fte = sum_fte)
df <- df %>%
mutate(combined_fte = case_when(prep_fte == 0 ~ sum_fte,
prep_fte != 0 ~ prep_fte)
)
df_medical <- df %>%
dplyr::filter(cadre %in% c("Doctor","Clinical Officer","Medical Assistant","Testing and Counseling Provider"))
View(df_medical)
df_medical <- df_medical %>%
dplyr::mutate(ClinicalMedical = 'ClinicalMedical')
df_medical <- df_medical %>%
filter(combined_fte != 0) %>%
group_by(psnu, ClinicalMedical, program) %>%
summarise(combined_fte = sum(combined_fte, na.rm = TRUE)) %>%
ungroup()
df_medical <- df_medical %>%
pivot_wider(names_from = c(ClinicalMedical, program),
values_from = combined_fte)
df_medical <- df_medical %>%
mutate_at(vars(`ClinicalMedical_Care and Treatment`:`ClinicalMedical_Testing`),~replace_na(.,0))
df_medical <- df_medical %>%
select(psnu, ClinicalMedical_Prevention, ClinicalMedical_Testing, `ClinicalMedical_Care and Treatment`)
df_dataclerk <- df %>%
dplyr::filter(cadre %in% c("Data Capturer", "Data Clerk", "File Clerk","Data Manager"))
f_dataclerk <- df_dataclerk %>%
mutate_at(vars(`orgunituid`),~replace_na(.,0))
df_dataclerk <- df_dataclerk %>%
mutate_at(vars(`orgunituid`),~replace_na(.,0))
View(df_dataclerk)
df_dataclerk <- df_dataclerk %>%
dplyr::mutate(DataClerk = 'DataClerk')
df_dataclerk <- df_dataclerk %>%
filter(combined_fte != 0 | orgunituid != 0) %>%
group_by(psnu, DataClerk, program) %>%
summarise(combined_fte = sum(combined_fte, na.rm = TRUE)) %>%
ungroup()
df_dataclerk <- df_dataclerk %>%
pivot_wider(names_from = c(DataClerk, program),
values_from = combined_fte)
df_dataclerk <- df_dataclerk %>%
select(psnu, DataClerk_Prevention, DataClerk_Testing, `DataClerk_Care and Treatment`)
#replace NAs with zeroes-----------------
df_dataclerk <- df_dataclerk %>%
mutate_at(vars(`DataClerk_Prevention`:`DataClerk_Care and Treatment`),~replace_na(.,0))
df_merged <- df_medical %>% dplyr::full_join((df_dataclerk))
View(df_merged)
df_bk<-df_merged%>% dplyr::select(psnu)
View(df_bk)
full_col_list <- c("psnu",
"ClinicalMedical_Prevention",
"ClinicalMedical_Testing",
"ClinicalMedical_Care and Treatment",
"ClinicalNursing_Prevention",
"ClinicalNursing_Testing",
"ClinicalNursing_Care and Treatment",
"LayCounselor_Prevention",
"LayCounselor_Testing",
"LayCounselor_Care and Treatment",
"LayCHW_Prevention",
"LayCHW_Testing",
"LayCHW_Care and Treatment",
"CaseManager_Prevention",
"CaseManager_Testing",
"CaseManager_Care and Treatment",
"Pharmacy_Prevention",
"Pharmacy_Testing",
"Pharmacy_Care and Treatment",
"Laboratory_Prevention",
"Laboratory_Testing",
"Laboratory_Care and Treatment",
"DataClerk_Prevention",
"DataClerk_Testing",
"DataClerk_Care and Treatment")
missingscols <- setdiff(full_col_list, names(df_merged))
df_merged[,missingscols]=NA
f_merged <- df_merged %>%
select(all_of(full_col_list))
df_merged <- df_merged %>%
select(all_of(full_col_list))
df_merged <- df_merged %>%
mutate_at(vars(`ClinicalMedical_Prevention`:`DataClerk_Care and Treatment`),~replace_na(.,0))
View(df_merged)
df <- df %>% mutate(expenditure_amt = as.numeric(expenditure_amt))
df <- df %>% mutate(fte = as.numeric(fte))
df <- df %>%
mutate_at(vars(`fte`:`expenditure_amt`),~replace_na(.,0))
View(df)
df_salaries <- df %>%
dplyr::filter(interaction_type == "Service Delivery") %>%
group_by(cadre) %>%
summarise(sumfte = sum(fte),
sumexpenditure_amt = sum(expenditure_amt)) %>%
ungroup()
View(df_salaries)
df_salaries <- df_salaries %>%
mutate_at(vars(`sumfte`:`sumexpenditure_amt`),~replace_na(.,0))
df_salaries <- df_salaries %>%
mutate(expenditureperFTE = sumexpenditure_amt/sumfte)
df_salarymedical <- df_salaries %>%
dplyr::filter(cadre %in% c("Doctor","Clinical Officer","Medical Assistant","Testing and Counseling Provider"))
View(df_salarymedical)
df_salarymedical <- df_salarymedical %>%
mutate(weight = sumfte/sum(df_salarymedical$sumfte))
weighted.mean(df_salarymedical$expenditureperFTE, df_salarymedical$weight)
clinical_medical_weighted.mean(df_salarymedical$expenditureperFTE, df_salarymedical$weight)
clinical_medical <-weighted.mean(df_salarymedical$expenditureperFTE, df_salarymedical$weight)
df_weighted means<-clinical_medical
weighted means<-clinical_medical
data_frame(clinical_medical)
tibble(clinical_medical)
as.data.frame(clinical_medical
)
df_salarynursing <- df_salaries %>%
dplyr::filter(cadre %in% c("Nurse","Midwife","Nursing Assistant","Auxiliary Nurse", "Auxiliary Midwife"))
df_salarynursing <- df_salarynursing %>%
mutate(weight = sumfte/sum(df_salarynursing$sumfte))
nursing_WM<-weighted.mean(df_salarynursing$expenditureperFTE, df_salarynursing$weight)
tibble(clinical_medical,nursing_WM)
df_wm<-tibble(clinical_medical,nursing_WM)
View(df_wm)
df_wm<-tibble(clinical_medical,nursing_WM)
glimpse(df_wm)
df_wm<-df_wm%>%
pivot_longer(
cols = `clinical_medical`: `nursing_wm`,
names_to="HRH",
values_to="Weighted Mean"
)
df_wm<-df_wm%>%
pivot_longer(
cols = `clinical_medical`: `nursing_WM`,
names_to="HRH",
values_to="Weighted Mean"
)
library(stringr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(readxl)
library(here)
library(ICPIutilities)
library(glamr)
library(purrr)
library(here)
library(data.table)
library(googlesheets4)
library(splitstackshape)
library(googledrive)
library(tameDP)
FAST_Intervention<-function(df){
#nested read_csv. Can be removed and run separately
df<-read_xlsx(df, "Standard COP Matrix-R", skip=3)
# Drop columns you don't need and rename
df<- df %>% dplyr::select( -c('Global','Prime Partner DUNS','Award Number',
'Appropriation Year',  'Initiative',
'Funding Category','GAP':'GHP-USAID',
'Construction':'DHA Relevant'))%>%
dplyr::rename("planning_cycle" =`Planning Cycle`,
"Prime Partner Name" = `Partner Name`,
"Is Indigenous Prime Partner" = `Is Indigenous Partner?`,
"Prime Partner Type" = `Partner Org Type`,
"Fiscal Year" = `Implementation Year`,
"Program Area" = `Major Program`,
"Sub Program Area" = `Sub Program`,
"Interaction Type" = `SD/NSD`,
"Beneficiary" = `Major Beneficiary`,
"Sub Beneficiary" = `Minor Beneficiary`,
"COP Budget New Funding" = `Total New Funding Sources`,
"COP Budget Pipeline" = `Applied Pipeline Amount`) %>%
dplyr::mutate(`Data Stream`="FAST Budget")
#Convert columns into characters
df<-df%>%
dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>%
dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>%
dplyr::mutate(`Is Indigenous Prime Partner`= as.character(`Is Indigenous Prime Partner`)) %>%
dplyr::mutate(`Prime Partner Type`= as.character(`Prime Partner Type`))
#convert budget columns to numeric
df<-df%>%
dplyr::mutate(`COP Budget New Funding`=as.numeric(`COP Budget New Funding`))%>%
dplyr::mutate(`COP Budget Pipeline`=as.numeric(`COP Budget Pipeline`))%>%
dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`))
#remove N/A's
df <- df %>%drop_na(`Operating Unit`)
#replace NAs with 0s
df<-df%>%
mutate_at(vars(`COP Budget New Funding`:`Total Planned Funding`),~replace_na(.,0))
#Add in agency category column to group agencies
df<- df %>% dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
ifelse(`Agency Category` == "HHS/CDC", "CDC",
ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))
#recode values to match naming in Financial Integrated Dataset
df<- df %>%  dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))
return(df)
}
#2) FAST by CROSS-CUTTING
#Clean the FAST SCM tab using the function for Cross-Cutting Attribution + Earmark data.
FAST_CCA<-function(df){
#nested read_csv. Can be removed and run separately
df<-read_xlsx(df, "Standard COP Matrix-R", skip=3)
# Drop columns you don't need and rename
df<- df %>% dplyr::select( -c('Global','Prime Partner DUNS','Award Number', 'Cost Type',
'Appropriation Year',  'Initiative',
'Appropriation Year','Funding Category','GAP':'Total Planned Funding'))%>%
dplyr::rename("planning_cycle" =`Planning Cycle`,
"Prime Partner Name" = `Partner Name`,
"Is Indigenous Prime Partner" = `Is Indigenous Partner?`,
"Prime Partner Type" = `Partner Org Type`,
"Fiscal Year" = `Implementation Year`,
"Program Area" = `Major Program`,
"Sub Program Area" = `Sub Program`,
"Interaction Type" = `SD/NSD`,
"Beneficiary" = `Major Beneficiary`,
"Sub Beneficiary" = `Minor Beneficiary`) %>%
dplyr::mutate(`Data Stream`="FAST Cross Cutting Attribution")
#remove N/A's
df <- df %>%drop_na(`Operating Unit`)
#replace NAs with 0s
df<-df%>%
mutate_at(vars(`Construction`:`GBV GHP-State`),~replace_na(.,0))
#Using pivot long to shift CCA vertically
df <- df %>% pivot_longer(cols = `Construction`:`GBV GHP-State`,
names_to = "Cross-Cutting Attribution",
values_to = "Total Planned Funding")
#Convert columns into characters
df<-df%>%
dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>%
dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>%
dplyr::mutate(`Is Indigenous Prime Partner`= as.character(`Is Indigenous Prime Partner`)) %>%
dplyr::mutate(`Prime Partner Type`= as.character(`Prime Partner Type`))
#Convert CCA budget into numeric
df<-df%>%
dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`))
#Add in agency category column to group agencies
df<- df %>% dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
ifelse(`Agency Category` == "HHS/CDC", "CDC",
ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))
#recode values to match naming in Financial Integrated Dataset
df<- df %>%  dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))
return(df)
}
#3) FAST BY INITIATIVE
#Clean the FAST SCM tab using the function for Initiative data.
#****Note that this is not by funding account since the FAST doesn't have applied pipeline by funding account*****
FAST_Initiative<-function(df){
#nested read_csv. Can be removed and run separately
df<-read_xlsx(df, "Standard COP Matrix-R", skip=3)
#include columns of interest
df<- df %>%  dplyr::select('Planning Cycle','Operating Unit':'Partner Name', 'Mechanism Name':'Initiative', 'Implementation Year':'Minor Beneficiary', 'Total New Funding Sources':'Applied Pipeline Amount')  %>%
#Rename to match BUDGET_ER_MER Dataset
dplyr::rename( "planning_cycle" =`Planning Cycle`,
"Prime Partner Name" =`Partner Name`,
"Is Indigenous Prime Partner" =`Is Indigenous Partner?`,
"Prime Partner Type" =`Partner Org Type`,
"initiative_name" =`Initiative`,
"Fiscal Year"= `Implementation Year`,
"funding_category"= `Funding Category`,
"Program Area" = `Major Program`,
"Sub Program Area" = `Sub Program`,
"Interaction Type" = `SD/NSD`,
"Beneficiary" =`Major Beneficiary`,
"Sub Beneficiary" =`Minor Beneficiary`,
"New Funding" =`Total New Funding Sources`,
"Applied Pipeline" =`Applied Pipeline Amount`,
) %>%
#Pivot COP Budget New Funding & COP Budget Pipeline to 'funding_type' with value as 'Total Planned Funding'
gather(funding_type,`Total Planned Funding`, `New Funding`:`Applied Pipeline`) %>%
#Pivot GAP, GHP-STATE, GHP-USAID to 'funding_account' with value as 'COP Budget New Funding'
#  gather(funding_account,`COP Budget New Funding`, `GAP`:`GHP-USAID`) %>%
#Create variable 'Data stream' with Initiative
dplyr::mutate(`Data Stream`="FAST Initiative")  %>% #consider renaming to specify FAST
#Convert columns into characters
dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>%
dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>%
dplyr::mutate(`Is Indigenous Prime Partner`= as.character(`Is Indigenous Prime Partner`)) %>%
dplyr::mutate(`Prime Partner Type`= as.character(`Prime Partner Type`))%>%
#Convert  budget into numeric
dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`)) %>%
#Replace NAs in numeric columns
dplyr::mutate_at(vars(`Total Planned Funding`),~replace_na(.,0))%>%
#Drop all rows without an OU specified
drop_na('Operating Unit')   %>%
#recode values for different variables as needed
dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))  %>%
#Add in agency category column to group agencies
dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
ifelse(`Agency Category` == "HHS/CDC", "CDC",
ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))
return(df)
}
#4) FAST BY COMMODITIES
#Clean the FAST Commodities tab using the function for Initiative data.
#****Note that this is not by funding account since the FAST doesn't have applied pipeline by funding account*****
FAST_Commodities<-function(df){
#nested read_csv. Can be removed and run separately
df<-read_xlsx(df, "Commodities-E", skip=3)
#include columns of interest
df<- df %>%
dplyr::select('Mechanism ID': 'Beneficiary', 'Initiative Name', 'Major Category': 'Item', 'Commodity Quantity', 'Unit Price', 'Unit Cost':'Total Item Budget')  %>%
#Remove dashes in Facility-based testing and Community-Based Testing temporarily
dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Facility-based testing-SD"= "HTS: Facility based testing-SD")) %>%
dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Community-based testing-SD"= "HTS: Community based testing-SD")) %>%
dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Facility-based testing-NSD"= "HTS: Facility based testing-NSD")) %>%
dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Community-based testing-NSD"= "HTS: Community based testing-NSD")) %>%
cSplit("Program Area", ":") %>%
separate(col = "Program Area_2", into=c("Sub Program Area", "Interaction Type"), sep="-") %>%
separate(col = "Beneficiary", into=c("Beneficiary", "Sub Beneficiary"), sep=":") %>%
#Rename to match BUDGET_ER_MER Dataset
dplyr::rename("initiative_name" =`Initiative Name`,) %>%
dplyr::rename("Program Area" =`Program Area_1`,) %>%
dplyr::rename("Commodity Unit Cost" =`Unit Cost`,) %>%
dplyr::rename("Commodity Unit Price" =`Unit Price`,) %>%
dplyr::rename("Total Planned Funding" =`Total Item Budget`,) %>%
dplyr::rename("Commodity Item" =`Item`,) %>%
#Create variables
dplyr::mutate(`Data Stream`="FAST Commodities")  %>%
dplyr::mutate(`Fiscal Year`="2021")  %>%
dplyr::mutate(`planning_cycle`="COP21")  %>%
#Replace NAs in numeric columns
dplyr::mutate_at(vars(`Total Planned Funding`),~replace_na(.,0))%>%
#Convert  character columns into Characters
dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>%
dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>%
#Convert  numeric  columns to numeric
dplyr::mutate(`Commodity Unit Cost`=as.numeric(`Commodity Unit Cost`)) %>%
dplyr::mutate(`Commodity Unit Price`=as.numeric(`Commodity Unit Price`)) %>%
dplyr::mutate(`Commodity Quantity`=as.numeric(`Commodity Quantity`)) %>%
dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`)) %>%
#Drop all rows without a MECH ID specified
drop_na('Mechanism ID') %>%
#recode values for different variables as needed
dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))  %>%
#Add dashes back in Facility-based testing and Community-Based Testing
dplyr::mutate(`Sub Program Area`= recode (`Sub Program Area`, "Facility based testing"= "Facility-based testing")) %>%
dplyr::mutate(`Sub Program Area`= recode (`Sub Program Area`, "Community based testing"= "Community-based testing"))
return(df)
}
#5) Mechs-List (Reference List)
#The commodities tab does have certain identifiers (Funding Agency, Mechanism Name, Prime Partner) so this list will be used later to join to make the final commodities data frame
FAST_MECHSLIST<-function(df){
#nested read_csv. Can be removed and run separately
df<-read_xlsx(df, "Mechs List-R")
#include columns of interest
df<- df %>%
dplyr::select ("OU", "Funding Agency", "Partner Name","Mechanism Name", "Mechanism ID", "Is Indigenous Partner?") %>%
#Rename to match BUDGET_ER_MER Dataset
dplyr::rename(
"Prime Partner Name" =`Partner Name`,
"Is Indigenous Prime Partner" =`Is Indigenous Partner?`,
) %>%
dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>%
#Add in agency category column to group agencies
dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
ifelse(`Agency Category` == "HHS/CDC", "CDC",
ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))
return(df)
}
#6) DATAPACK
#7) Read in the data stream functions as data frames
#Pattern is helpful to use here but be careful that you are not picking up more than one dataset
#Read in Fast files
Fast<-list.files("path",full.names = TRUE)
#Data frame for Intervention Budget
df.Intervention <- purrr::map_dfr(.x = Fast,
.f = ~ FAST_Intervention(.x))
#Data frame for Cross-Cutting Attribution Budget
df.CCA <- purrr::map_dfr(.x = Fast,
.f = ~ FAST_CCA(.x))
#Data frame for Initiative Budget
df.Initiative <- purrr::map_dfr(.x = Fast,
.f = ~ FAST_Initiative(.x))
#additional steps for Commodities
#Data frame for Commodities Budget (prior to merging in identifiers)
df.Commodities_pre <- purrr::map_dfr(.x = Fast,
.f = ~ FAST_Commodities(.x))
#Data frame for Mech List
df.MechsList <- purrr::map_dfr(.x = Fast,
.f = ~ FAST_MECHSLIST(.x))
#Merge in  Mech List to make final Commodities data frame
#Note that this includes OU but not Operating Unit
df.Commodities<- left_join(df.Commodities_pre, df.MechsList, by = "Mechanism ID")
#Data frame for Datapack
datapacks <- list.files ("path", full.names = TRUE)
df_dp <- purrr::map_dfr(.x = datapacks,
.f = ~ tameDP::tame_dp(.x))
library(here)
here()
