# Title: COP21 FAST/DATAPACK DATA WRANGLING
# Authors: Jairo Montes & Vanessa Da Costa
# Last updated: "January 14, 2021"
# Purpose: Create 1 Master COP21 File from 5 Data Streams & 1 historical Dataset:
  #1) FAST by Intervention
  #2) FAST by Cross-Cutting
  #3) FAST by Initiative
  #4) FAST by Commodities
  #5) Mechs-List (Reference List)
  #6) Datapack 
  #7) Budget ER MER Dataset
  #8) Read in Data stream functions as Data Frames
  #9) Master COP21 FAST/DATAPACK Combined Dataset
  #10) Review Data
  #11) Export Data
--------------------------------
#Install packages and run libraries
install.packages("tidyr")
install.packages("tidyverse")
install.packages("dplyr")
Install.packages("stringr")
install.packages("readxl")
install.packages("here")
install.packages("purr")
install.packages("devtools")
install.packages("googlesheets4")
install.packages("remote")
remotes::install_github("ICPI/ICPIutilities")
install.packages("data.table")
install.packages("splitstackshape")
install.packages("googledrive")
install.packages("devtools")
devtools::install_github("USAID-OHA-SI/glamr")
devtools::install_github("USAID-OHA-SI/tameDP")

library(stringr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
library(readxl)
library(here)
library(ICPIutilities)
library(glamr)
library(purrr)
library(here)
library(data.table)
library(googlesheets4)
library(splitstackshape)
library(googledrive)
library(tameDP)


#Pulling in files from Documents folder
here("path")

#1) FAST BY INTERVENTION
  #Clean the FAST SCM tab using the function for intervention data.
  FAST_Intervention<-function(df){
  #nested read_csv. Can be removed and run separately
  df<-read_xlsx(df, "Standard COP Matrix-R", skip=3)
  
  # Drop columns you don't need and rename  
  df<- df %>% dplyr::select( -c('Global','Prime Partner DUNS','Award Number',
                                'Appropriation Year',  'Initiative',
                                'Funding Category','GAP':'GHP-USAID', 
                                'Construction':'DHA Relevant'))%>%
    dplyr::rename("planning_cycle" =`Planning Cycle`,
                  "Prime Partner Name" = `Partner Name`,
                  "Is Indigenous Prime Partner" = `Is Indigenous Partner?`,
                  "Prime Partner Type" = `Partner Org Type`,
                  "Fiscal Year" = `Implementation Year`,
                  "Program Area" = `Major Program`,
                  "Sub Program Area" = `Sub Program`,
                  "Interaction Type" = `SD/NSD`,
                  "Beneficiary" = `Major Beneficiary`,
                  "Sub Beneficiary" = `Minor Beneficiary`,
                  "COP Budget New Funding" = `Total New Funding Sources`,
                  "COP Budget Pipeline" = `Applied Pipeline Amount`) %>% 
    dplyr::mutate(`Data Stream`="FAST Budget")
  
  #Convert columns into characters
  df<-df%>%
    dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>% 
    dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>% 
    dplyr::mutate(`Is Indigenous Prime Partner`= as.character(`Is Indigenous Prime Partner`)) %>% 
    dplyr::mutate(`Prime Partner Type`= as.character(`Prime Partner Type`))
  
  #convert budget columns to numeric
  df<-df%>%
    dplyr::mutate(`COP Budget New Funding`=as.numeric(`COP Budget New Funding`))%>%
    dplyr::mutate(`COP Budget Pipeline`=as.numeric(`COP Budget Pipeline`))%>%
    dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`))
  
  #remove N/A's
  df <- df %>%drop_na(`Operating Unit`)
  
  #replace NAs with 0s
  df<-df%>%
    mutate_at(vars(`COP Budget New Funding`:`Total Planned Funding`),~replace_na(.,0))
  
  #Add in agency category column to group agencies
  df<- df %>% dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
    mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
                                      ifelse(`Agency Category` == "HHS/CDC", "CDC",
                                             ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))

    #recode values to match naming in Financial Integrated Dataset
  df<- df %>%  dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
    dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))
  
  return(df)
}

#2) FAST by CROSS-CUTTING
  #Clean the FAST SCM tab using the function for Cross-Cutting Attribution + Earmark data.
  FAST_CCA<-function(df){
  #nested read_csv. Can be removed and run separately
  df<-read_xlsx(df, "Standard COP Matrix-R", skip=3)
  
  # Drop columns you don't need and rename  
  df<- df %>% dplyr::select( -c('Global','Prime Partner DUNS','Award Number', 'Cost Type',
                                'Appropriation Year',  'Initiative',
                                'Appropriation Year','Funding Category','GAP':'Total Planned Funding'))%>%
    dplyr::rename("planning_cycle" =`Planning Cycle`,
                  "Prime Partner Name" = `Partner Name`,
                  "Is Indigenous Prime Partner" = `Is Indigenous Partner?`,
                  "Prime Partner Type" = `Partner Org Type`,
                  "Fiscal Year" = `Implementation Year`,
                  "Program Area" = `Major Program`,
                  "Sub Program Area" = `Sub Program`,
                  "Interaction Type" = `SD/NSD`,
                  "Beneficiary" = `Major Beneficiary`,
                  "Sub Beneficiary" = `Minor Beneficiary`) %>% 
    dplyr::mutate(`Data Stream`="FAST Cross Cutting Attribution")
  
  #remove N/A's
  df <- df %>%drop_na(`Operating Unit`)
  
  #replace NAs with 0s
  df<-df%>%
    mutate_at(vars(`Construction`:`GBV GHP-State`),~replace_na(.,0))
  
  
  #Using pivot long to shift CCA vertically
  df <- df %>% pivot_longer(cols = `Construction`:`GBV GHP-State`,
                            names_to = "Cross-Cutting Attribution",
                            values_to = "Total Planned Funding")
  
  #Convert columns into characters
  df<-df%>%
    dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>% 
    dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>% 
    dplyr::mutate(`Is Indigenous Prime Partner`= as.character(`Is Indigenous Prime Partner`)) %>% 
    dplyr::mutate(`Prime Partner Type`= as.character(`Prime Partner Type`))
  #Convert CCA budget into numeric
  df<-df%>%
    dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`))
  
  #Add in agency category column to group agencies
  df<- df %>% dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
    mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
                                      ifelse(`Agency Category` == "HHS/CDC", "CDC",
                                             ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))
  
  #recode values to match naming in Financial Integrated Dataset
  df<- df %>%  dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
  dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))
    
  return(df)
}

#3) FAST BY INITIATIVE
  #Clean the FAST SCM tab using the function for Initiative data. 
  #****Note that this is not by funding account since the FAST doesn't have applied pipeline by funding account*****
  FAST_Initiative<-function(df){
  #nested read_csv. Can be removed and run separately
  df<-read_xlsx(df, "Standard COP Matrix-R", skip=3)
  #include columns of interest
  df<- df %>%  dplyr::select('Planning Cycle','Operating Unit':'Partner Name', 'Mechanism Name':'Initiative', 'Implementation Year':'Minor Beneficiary', 'Total New Funding Sources':'Applied Pipeline Amount')  %>%
    #Rename to match BUDGET_ER_MER Dataset
    dplyr::rename( "planning_cycle" =`Planning Cycle`,
                   "Prime Partner Name" =`Partner Name`, 
                   "Is Indigenous Prime Partner" =`Is Indigenous Partner?`,
                   "Prime Partner Type" =`Partner Org Type`,
                   "initiative_name" =`Initiative`,
                   "Fiscal Year"= `Implementation Year`, 
                   "funding_category"= `Funding Category`, 
                   "Program Area" = `Major Program`,
                   "Sub Program Area" = `Sub Program`,
                   "Interaction Type" = `SD/NSD`,
                   "Beneficiary" =`Major Beneficiary`,
                   "Sub Beneficiary" =`Minor Beneficiary`,
                   "New Funding" =`Total New Funding Sources`,
                     "Applied Pipeline" =`Applied Pipeline Amount`,
    ) %>%
    
    #Pivot COP Budget New Funding & COP Budget Pipeline to 'funding_type' with value as 'Total Planned Funding'
    gather(funding_type,`Total Planned Funding`, `New Funding`:`Applied Pipeline`) %>%
    
    #Pivot GAP, GHP-STATE, GHP-USAID to 'funding_account' with value as 'COP Budget New Funding'
    #  gather(funding_account,`COP Budget New Funding`, `GAP`:`GHP-USAID`) %>%
    
    #Create variable 'Data stream' with Initiative
    dplyr::mutate(`Data Stream`="FAST Initiative")  %>% #consider renaming to specify FAST
    
    #Convert columns into characters
    dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>% 
    dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>% 
    dplyr::mutate(`Is Indigenous Prime Partner`= as.character(`Is Indigenous Prime Partner`)) %>% 
    dplyr::mutate(`Prime Partner Type`= as.character(`Prime Partner Type`))%>% 
  
    #Convert  budget into numeric
    dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`)) %>% 
   
    #Replace NAs in numeric columns
    dplyr::mutate_at(vars(`Total Planned Funding`),~replace_na(.,0))%>%
    
    
    #Drop all rows without an OU specified 
    drop_na('Operating Unit')   %>%
    
    #recode values for different variables as needed
    dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
    dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))  %>%
  

   #Add in agency category column to group agencies
    dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
    mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
                                      ifelse(`Agency Category` == "HHS/CDC", "CDC",
                                             ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))
  
  return(df)
}

#4) FAST BY COMMODITIES
#Clean the FAST Commodities tab using the function for Initiative data. 
#****Note that this is not by funding account since the FAST doesn't have applied pipeline by funding account*****
  FAST_Commodities<-function(df){
  #nested read_csv. Can be removed and run separately
  df<-read_xlsx(df, "Commodities-E", skip=3)
  #include columns of interest
  df<- df %>%  
  dplyr::select('Mechanism ID': 'Beneficiary', 'Initiative Name', 'Major Category': 'Item', 'Commodity Quantity', 'Unit Price', 'Unit Cost':'Total Item Budget')  %>%
    
    #Remove dashes in Facility-based testing and Community-Based Testing temporarily
    dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Facility-based testing-SD"= "HTS: Facility based testing-SD")) %>%
    dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Community-based testing-SD"= "HTS: Community based testing-SD")) %>%
    dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Facility-based testing-NSD"= "HTS: Facility based testing-NSD")) %>%
    dplyr::mutate(`Program Area`= recode (`Program Area`, "HTS: Community-based testing-NSD"= "HTS: Community based testing-NSD")) %>%
    
    cSplit("Program Area", ":") %>%
    separate(col = "Program Area_2", into=c("Sub Program Area", "Interaction Type"), sep="-") %>%
    separate(col = "Beneficiary", into=c("Beneficiary", "Sub Beneficiary"), sep=":") %>%
    
    
    #Rename to match BUDGET_ER_MER Dataset
    dplyr::rename("initiative_name" =`Initiative Name`,) %>%
    dplyr::rename("Program Area" =`Program Area_1`,) %>%
    dplyr::rename("Commodity Unit Cost" =`Unit Cost`,) %>%
    dplyr::rename("Commodity Unit Price" =`Unit Price`,) %>%
    dplyr::rename("Total Planned Funding" =`Total Item Budget`,) %>%
    dplyr::rename("Commodity Item" =`Item`,) %>%
    
    
    #Create variables
    dplyr::mutate(`Data Stream`="FAST Commodities")  %>%
    dplyr::mutate(`Fiscal Year`="2021")  %>%
    dplyr::mutate(`planning_cycle`="COP21")  %>%
    
    
    #Replace NAs in numeric columns
    dplyr::mutate_at(vars(`Total Planned Funding`),~replace_na(.,0))%>%
    
    
    #Convert  character columns into Characters
    dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>% 
    dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`)) %>% 
    
    #Convert  numeric  columns to numeric
    dplyr::mutate(`Commodity Unit Cost`=as.numeric(`Commodity Unit Cost`)) %>% 
    dplyr::mutate(`Commodity Unit Price`=as.numeric(`Commodity Unit Price`)) %>% 
    dplyr::mutate(`Commodity Quantity`=as.numeric(`Commodity Quantity`)) %>% 
    dplyr::mutate(`Total Planned Funding`=as.numeric(`Total Planned Funding`)) %>% 
    
    
    #Drop all rows without a MECH ID specified 
    drop_na('Mechanism ID') %>%
    
    #recode values for different variables as needed
    dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "SD"= "Service Delivery")) %>%
    dplyr::mutate(`Interaction Type`= recode (`Interaction Type`, "NSD"= "Non Service Delivery"))  %>%
  
    
    
    #Add dashes back in Facility-based testing and Community-Based Testing 
    dplyr::mutate(`Sub Program Area`= recode (`Sub Program Area`, "Facility based testing"= "Facility-based testing")) %>%
    dplyr::mutate(`Sub Program Area`= recode (`Sub Program Area`, "Community based testing"= "Community-based testing"))  
  
  

  
  return(df)
}

#5) Mechs-List (Reference List)
#The commodities tab does have certain identifiers (Funding Agency, Mechanism Name, Prime Partner) so this list will be used later to join to make the final commodities data frame
  FAST_MECHSLIST<-function(df){
  #nested read_csv. Can be removed and run separately
  df<-read_xlsx(df, "Mechs List-R")
#include columns of interest
  df<- df %>%  
    dplyr::select ("OU", "Funding Agency", "Partner Name","Mechanism Name", "Mechanism ID", "Is Indigenous Partner?") %>% 
    #Rename to match BUDGET_ER_MER Dataset
    dplyr::rename( 
                   "Prime Partner Name" =`Partner Name`, 
                   "Is Indigenous Prime Partner" =`Is Indigenous Partner?`,
    ) %>%
  
    dplyr::mutate(`Mechanism ID`=as.character(`Mechanism ID`)) %>% 
    
  #Add in agency category column to group agencies
  dplyr::mutate(`Agency Category` = `Funding Agency`)%>%
    mutate(`Agency Category` = ifelse(`Agency Category` == "USAID", "USAID",
                                      ifelse(`Agency Category` == "HHS/CDC", "CDC",
                                             ifelse(`Agency Category` =="Dedup", "Dedup","Other"))))
  

return(df)
}

#6) DATAPACK


#7) Read in the data stream functions as data frames 
  #Pattern is helpful to use here but be careful that you are not picking up more than one dataset

  #Read in Fast files
  Fast<-list.files("path",full.names = TRUE)
  
  #Data frame for Intervention Budget
  df.Intervention <- purrr::map_dfr(.x = Fast,
                                  .f = ~ FAST_Intervention(.x))

  #Data frame for Cross-Cutting Attribution Budget
  df.CCA <- purrr::map_dfr(.x = Fast,
                         .f = ~ FAST_CCA(.x))

  #Data frame for Initiative Budget
  df.Initiative <- purrr::map_dfr(.x = Fast,
                           .f = ~ FAST_Initiative(.x))

  
  #additional steps for Commodities
  #Data frame for Commodities Budget (prior to merging in identifiers)
  df.Commodities_pre <- purrr::map_dfr(.x = Fast,
                                  .f = ~ FAST_Commodities(.x))

  #Data frame for Mech List
  df.MechsList <- purrr::map_dfr(.x = Fast,
                                       .f = ~ FAST_MECHSLIST(.x))
  
  #Merge in  Mech List to make final Commodities data frame
  #Note that this includes OU but not Operating Unit
  df.Commodities<- left_join(df.Commodities_pre, df.MechsList, by = "Mechanism ID")
  
  

  #Data frame for Datapack 
  datapacks <- list.files ("path", full.names = TRUE)
  df_dp <- purrr::map_dfr(.x = datapacks,
                   .f = ~ tameDP::tame_dp(.x))
  
 
  #8) Data frame for 'BUDGET ER MER' Dataset
  
  df.Budget_ER_MER <- read.csv ("path/FY20.Q4.Budget.ER.MER_Clean.csv", check.names = FALSE)
  
  df.Budget_ER_MER <-  df.Budget_ER_MER %>%
    dplyr::mutate(`Fiscal Year`= as.character(`Fiscal Year`))
  
   
  #9) Master COP21 FAST/DATAPACK File
  #bind dataframes do not include df. Commodities_pre but only include 'df.Commodities'
  df.COP21PlanningDataset<-bind_rows(df.Intervention,df.CCA, df.Initiative, df.Commodities, df.Budget_ER_MER)

  #remove irrelevant columns (ifn)
   #  df.COP21PlanningDataset<-  df.COP21PlanningDataset %>%
  #select( -c('XXX','XXX',XXX', ))%>%  
  

#10) REVIEW DATA
  glimpse(df.COP21PlanningDataset)
  

#11) EXPORT DATA
  write_csv(df.COP21PlanningDataset, path = "path/FAST_Datapack_Dataset.csv")

  
